#!/usr/bin/env python
#===============================================================================
#
# Python Numpy/Scipy program for analyzing MMTO WFS seeing data.
#
#===============================================================================

import numpy as np
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import scipy.stats as stats
import MySQLdb
import math

params = {'axes.labelsize': 14,
          'axes.fontsize' : 14,
          'axes.set_aspect': 14,
          'text.fontsize': 12,
          'legend.fontsize': 14,
          'xtick.labelsize': 14,
          'ytick.labelsize': 14,
          'figure.facecolor': 'white'}

plt.rcParams.update(params)

plt.rcParams['figure.figsize'] = 12, 8

# Date for beginning for WFS Data
t1 = "2012-05-01"

# End of study, remains the same...
t2 = "2012-09-01"


# These may be adjusted for various plotting formats.
max_x = 2.0
min_x = -2.0  
max_y = 5.0 # Maximum seeing to plot
min_y = 0.2 # Mininum seeing to plot

# The rest stays the same...
# Blank arrays to hold the X and Y values.
x = []
y = []

wfs_f5 = []
wfs_f9 = []
wfs_total = []

count_f5 = 0
count_f9 = 0
count_total = 0

# Get the MySQL data.
#
# Reference:
# http://mysql-python.sourceforge.net/MySQLdb.html
db=MySQLdb.connect(user="mmtstaff",passwd="multiple",db="mmtlogs")

# Read in data
c=db.cursor()

# Execute the SQL command to get the seeing data.
c.execute("""SELECT `timestamp`, `see_zenith_as`, `mode`, MONTH(`timestamp`) FROM `wfs_seeing_log` WHERE timestamp > %s AND timestamp < %s ORDER BY `wfs_seeing_log`.`timestamp` ASC""", (t1, t2))

# Fetch all the rows in a list of lists.
results = c.fetchall()

# A counter of the number of rows returned from the MySQL database.
count = 0

for row in results:
    count += 1
    timestamp = row[0]
    see_zenith_as = row[1]
    wfs_mode = row[2]
    month = row[3]
    
    print "row=%s" % (count,)
    
    if see_zenith_as >= min_y:
        if see_zenith_as <= max_y:
            count_total += 1
            wfs_total.append(see_zenith_as)
            if wfs_mode == "F/5":
                count_f5 += 1
                wfs_f5.append(see_zenith_as)
            elif wfs_mode == "F/9":
                count_f9 += 1
                wfs_f9.append(see_zenith_as)
            else:
                print "Rejecting row: unknown mode"
        else:
            print "Rejecting row: seeing too high"
    else:
        print "Rejecting row: seeing too low"
       
            
                
title_str = """Seeing Data: %s to %s""" % (t1, t2)
xlabel_str = 'Seeing (Arc Seconds, Corrected to Zenith)'
ylabel_str = 'Frequency'
bins_x = 40

# disconnect from server
db.close()

np1 = np.array(wfs_f5)
np2 = np.array(wfs_f9)
np4 = np.array(wfs_total)

txt =  "F/5 WFS Samples = %s\n" % (len(wfs_f5))
txt += "F/5 WFS Median =  %.2f arcsec\n" % (np.ma.extras.median(np1))
txt += "F/5 WFS Mean =  %.2f arcsec\n" % (np1.mean())
txt += "-------------------\n"

txt += "F/9 WFS Samples = %s\n" % (len(wfs_f9))
txt += "F/9 WFS Median =  %.2f arcsec\n" % (np.ma.extras.median(np2))
txt += "F/9 WFS Mean =  %.2f arcsec\n" % (np2.mean())
txt += "-------------------\n"

txt += "Combined WFS Samples = %s\n" % (len(wfs_total))
txt += "Combined WFS Median =  %.2f arcsec\n" % (np.ma.extras.median(np4))
txt += "Combined WFS Mean =  %.2f arcsec\n" % (np4.mean())

plt.hist( [np1, np2, np4 ], bins_x,  label=['F5', 'F9', 'Combined'] )

plt.legend()

plt.title(title_str, fontsize=18)
plt.xlabel(xlabel_str, fontsize=14)
plt.ylabel(ylabel_str, fontsize=14)

plt.text(1.5, 100, txt,
        horizontalalignment='left',
        verticalalignment='center')

plt.grid(True)

plt.axis('tight')

show = False
if show:
    plt.show()
else: 
    plt.savefig("trisum_seeing_hist.png");





