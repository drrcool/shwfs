#!/usr/bin/ruby

require 'libglade2'
require 'thread'
require 'timeout'
require 'socket'
require '/mmt/admin/srv/tcs_lookup.rb'
require '/mmt/shwfs/msg.rb'

Thread.abort_on_exception = true

### define the main GUI window
class MainWindow
  include MSG

  def initialize
    @path = "/mmt/shwfs"
    @dir = "/mmt/shwfs/datadir"

    @glade = GladeXML.new("#{@path}/glade/maestro_gui.glade") {|handler| method(handler)}
    @continuous = @glade.get_widget("Continuous")
    @mainwindow = @glade.get_widget("MainWindow")
    @exptime = @glade.get_widget("ExpTime")
    @status = @glade.get_widget("StatusBar")
    @menubar = @glade.get_widget("menubar1")
    @focus = @glade.get_widget("Focus")
    @coma = @glade.get_widget("Coma")
    @primary = @glade.get_widget("Primary")
    @m1_gain = @glade.get_widget("M1_gain")
    @m2_gain = @glade.get_widget("M2_gain")
    @turbo = @glade.get_widget("Turbo")


    #This only works for F5 currently, so hardwire this
    @mode = "F5"

    @running = false
    @wfsock = nil
    @mmirsock = nil
    @filetime = 0
    @exposing = false
    @m1_gain.set_value(0.1)
    @exptime.set_value(10.0)
    @m2_gain.set_value(0.2)
    #wfsopen #Removed this to make all the calls happen individually.
    whost, wport = srv_lookup('mmirs-wfs')
  end

  def wfsopen
    unless @wfsock
      whost, wport = srv_lookup('wfs')
      @wfsock = sockopen(whost, wport)
    end
  end

  def wfsclose
    if @wfsock
      @wfsock.close
      @wfsock = nil
    end
  end

  # kill the main window on a destroy
  def on_MainWindow_destroy
    wfsclose
    Gtk.main_quit
  end

  # routine to print to statusbar
  def report(text)
    @status.pop(0)
    @status.push(0, text)
  end

  # menubar callbacks
  def on_quit_activate
    wfsclose
    Gtk.main_quit
  end

  # turbo mode!
  def on_Turbo_toggled
    if @turbo.active?
      @m1_gain.set_sensitive(false)
      @m2_gain.set_sensitive(false)

      @m1_gain_archive = @m1_gain.value
      @m2_gain_archive = @m2_gain.value
      @m1_gain.value = 0.5
      @m2_gain.value = 1.0

      wfsopen
      msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
      msg_cmd(@wfsock, "m2_gain", @m2_gain.value)
      wfsclose


    else
      @m1_gain.set_sensitive(true)
      @m2_gain.set_sensitive(true)


      @m1_gain.value = @m1_gain_archive
      @m2_gain.value = @m2_gain_archive

      wfsopen
      msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
      msg_cmd(@wfsock, "m2_gain", @m2_gain.value)
      wfsclose

    end
  end

  # analyze image or list of images
  def centroid(list)
    report("Centroiding....")
    wfsopen
    test = msg_cmd(@wfsock, "centroid", list)
    wfsclose
    report("Centroiding Complete.")
    return test
  end


  #configure and take exposure
  def grab_image

    #Check to see if a single exposure is already being taken
    if @exposing
      return false
    end
    
    
    exptime = @exptime.value.to_f
    #Not making it possible to choose where this goes. Hardwiring it
    file = "cont_wfs"
    nexp = 1
    error = false
    
    n = 1
    ngood = 0
    ntry = 0

    #Get the filename
    num = 0
    fullfilename = sprintf("%s/%s_%04d.fits", @dir, file, num)
    netfullfilename = sprintf("%s/%s_%04d.fits", @netdir, file, num)
    filename = sprintf("%s_%04d.fits", file, num)
    
    #Check to see if this file counter exists. If yes, increment
    while test(?e, fullfilename)
      num = num + 1
      fullfilename = sprintf("%s/%s_%04d.fits", @dir, file, num)
      netfullfilename = sprintf("%s/%s_%04d.fits", @netdir, file, num)
      filename = sprintf("%s_%04d.fits", file, num)
    end
    
    #Fire a thread to countdown the exposures on the statusbar
    if exptime >= 1
      count = Thread.new {
        left = exptime.to_i
        left.times {
          report("Exposing \##{n} (#{filename})..#{left} sec left.")
          sleep(1)
          left = left - 1
        }
        report("Reading out \##{n} (#{filename})....")
      }
    else
      report("Exposing \##{n} (#{filename})....")
    end
    
    #Give the script 30s beyond the exposure time
    begin
      time = exptime + 30
      get_stuff = Thread.new{
        system("#{@path}/getimage #{exptime} #{fullfilename}")
      }
      
      timeout = 0
      while get_stuff.alive?
        if (timeout >= time && get_stuff.alive?)
          get_stuff.kill
          raise "F5 WFS Communication script hung."
        end
        sleep(1.0)
        timeout = timeout + 1
      end
    end

    
    
    #Counter thread better be dead by now
    if (count.alive?)
      count.kill
      report("Error Exposing #{filename}: Script died prematurely")
      error = true
      return
    end
    
    # should only get here if everything is working well
    begin
      timeout(10){
        if test(?s, fullfilename)
          system("#{@path}/header.pl #{fullfilename} #{exptime} F5")
          system("/usr/bin/xpaset -p WFS file #{fullfilename}")
          system("/usr/bin/xpaset -p WFS zoom to 1.0")

          centroid_status = centroid(fullfilename)
          @filetime = time

          if centroid_status == true
            return true
          else
            report "There was a problem Centroiding, skipping file"
            puts "there was a problem with centroiding file %s" % fullfilename
            return false
          end                    
        else
          raise "Image Missing"
        end
      }
    end
    
  end

  
          


  #RJC -- These transmit to the hexapod even when we aren't
  #doing continuous.  Rather tahn do the msg_cmd, we have moved
  #the msg_cmd to the continuous loop

  # change gain values for WFS corrections
  def on_M1_gain_value_changed
  #  msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
  end

  def on_M2_gain_value_changed
 #   msg_cmd(@wfsock, "m2_gain", @m2_gain.value)
  end

  # continuously grab latest frame, analyze, and send requested corrections
  def on_Continuous_toggled
    if (@continuous.active?)
      @running = true
      @continuous.child.set_text("STOP Continuous WFS")
    else
      @running = false
      @continuous.child.set_text("START Continous WFS")
    end

    t = Thread.new{
      
      while @running
        got_image = grab_image

        if got_image

          #Set the gains
          msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
          msg_cmd(@wfsock, "m2_gain", @m2_gain.value)

          report ("Applying Corrections as Checked.")

          #If the focus box is checked, apply the focus correction
          if @focus.active?
            wfsopen
            focus = msg_get(@wfsock, 'focus_um').to_f
            if focus < 50.0
              msg_cmd(@wfssock, "corr_focus", nil)
            else
              report("Focus error too large.")
              puts("Skilling focus error")
            end
            wfsclose
          end

          #Is the coma checked?
          if @coma.active?
            wfsopen
            msg_cmd(@wfsock, "corr_coma", nil)
            wfsclose
          end

          #Is the primary checked?
          if @primary.active?
            wfsopen
            msg_cmd(@wfsock, "corr_primary", nil)
            wfsclose
          end

          #Go back to defaul gains
          wfsopen
          msg_cmd(@wfsock, "m1_gain", 0.5)
          msg_cmd(@wfsock, "m2_gain", 1.0)
          wfsclose
          
        end

        report("Waiting for next image...")
        
                  

      end
    
      report("Stopped Continous WFS")
      
    }
    

      
    
  end
end

# get the ball rolling!
Gtk.init
MainWindow.new()
Gtk.main
