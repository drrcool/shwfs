#!/usr/bin/ruby

require 'libglade2'
require 'thread'
require 'timeout'
require 'socket'
require '/mmt/admin/srv/tcs_lookup.rb'
require '/mmt/shwfs/msg.rb'

Thread.abort_on_exception = true

### define the main GUI window
class MainWindow
  include MSG

  def initialize
    @path = "/mmt/shwfs"
    @dir = "/mmt/shwfs/datadir"

    @glade = GladeXML.new("#{@path}/glade/maestro_gui.glade") {|handler| method(handler)}
    @getimage = @glade.get_widget("GetImage")
    @continuous = @glade.get_widget("Continuous")
    @mainwindow = @glade.get_widget("MainWindow")
    @status = @glade.get_widget("StatusBar")
    @menubar = @glade.get_widget("menubar1")
    @focus = @glade.get_widget("Focus")
    @coma = @glade.get_widget("Coma")
    @primary = @glade.get_widget("Primary")
    @m1_gain = @glade.get_widget("M1_gain")
    @m2_gain = @glade.get_widget("M2_gain")
    @turbo = @glade.get_widget("Turbo")
    

    @running = false
    @wfsock = nil
    @mmirsock = nil
    @filetime = 0
    @m1_gain.set_value(0.1)
    @m2_gain.set_value(0.2)   
    #wfsopen #Removed this to make all the calls happen individually.
    whost, wport = srv_lookup('mmirs-wfs')
  end

  def wfsopen
    unless @wfsock
      whost, wport = srv_lookup('wfs')
      @wfsock = sockopen(whost, wport)
    end
  end

  def wfsclose
    if @wfsock
      @wfsock.close
      @wfsock = nil
    end
  end

  # kill the main window on a destroy
  def on_MainWindow_destroy
    wfsclose
    Gtk.main_quit
  end

  # routine to print to statusbar
  def report(text)
    @status.pop(0)
    @status.push(0, text)
  end

  # menubar callbacks
  def on_quit_activate
    wfsclose
    Gtk.main_quit
  end

  # turbo mode!
  def on_Turbo_toggled
    if @turbo.active?
      @m1_gain.set_sensitive(false)
      @m2_gain.set_sensitive(false)

      @m1_gain_archive = @m1_gain.value
      @m2_gain_archive = @m2_gain.value
      @m1_gain.value = 0.5
      @m2_gain.value = 1.0

      wfsopen
      msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
      msg_cmd(@wfsock, "m2_gain", @m2_gain.value)
      wfsclose
      
      
    else
      @m1_gain.set_sensitive(true)
      @m2_gain.set_sensitive(true)

      
      @m1_gain.value = @m1_gain_archive
      @m2_gain.value = @m2_gain_archive

      wfsopen
      msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
      msg_cmd(@wfsock, "m2_gain", @m2_gain.value)
      wfsclose
      
    end
  end

  # analyze image or list of images
  def centroid(list)
    report("Centroiding....")
    wfsopen
    test = msg_cmd(@wfsock, "centroid", list)
    wfsclose
    report("Centroiding Complete.")
    return test
  end


  #configure and take exposure
  

  # grab latest image
  def grab_image

    #This software just takes an image. This is *Very* different than
    # it was with the original MMIRS system and if there are problems it's likely here
    
    
    
    
    
    
  end    

  #RJC -- These transmit to the hexapod even when we aren't
  #doing continuous.  Rather tahn do the msg_cmd, we have moved
  #the msg_cmd to the continuous loop
  
  # change gain values for WFS corrections
  def on_M1_gain_value_changed
  #  msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
  end

  def on_M2_gain_value_changed
 #   msg_cmd(@wfsock, "m2_gain", @m2_gain.value)
  end

  # grab latest image and centroid it
  def on_GetImage_clicked
    @continuous.set_sensitive(false)
    @getimage.set_sensitive(false)
    Thread.new {
      grab_image
      @continuous.set_sensitive(true)
      @getimage.set_sensitive(true)
    }
  end

  # continuously grab latest frame, analyze, and send requested corrections
  def on_Continuous_toggled
    if (@continuous.active?)
      @getimage.set_sensitive(false)
      @running = true
      @continuous.child.set_text("STOP Continuous WFS")
      t = Thread.new {
        while @running do
          got_image = grab_image

          if got_image

            #Set the gain
            msg_cmd(@wfsock, "m1_gain", @m1_gain.value)
            msg_cmd(@wfsock, "m2_gain", @m2_gain.value)
                
            report("Applying Corrections.")

            if @focus.active?

              wfsopen
              focus = msg_get(@wfsock, 'focus_um').to_f
              if focus < 50.0
                msg_cmd(@wfsock, "corr_focus", nil)
              else
                report("Focus error too large.")
              end
              wfsclose
              
            end
            if @coma.active?
              wfsopen
              msg_cmd(@wfsock, "corr_coma", nil)
              wfsclose
            end
            if @primary.active?
              wfsopen
              msg_cmd(@wfsock, "corr_primary", nil)
              wfsclose
            end

            #Go back to default gains
            wfsopen
            msg_cmd(@wfsock, "m1_gain", 0.5)
            msg_cmd(@wfsock, "m2_gain", 1.0)
            wfsclose
            
          end

          report("Waiting for next image....")
          sleep(2)
         
        end
        report("Stopped Continuous WFS.")
      }
    else
      @running = false
      @getimage.set_sensitive(true)
      @continuous.child.set_text("START Continuous WFS")

      
    end
  end
         
end

# get the ball rolling!
Gtk.init
MainWindow.new()
Gtk.main
