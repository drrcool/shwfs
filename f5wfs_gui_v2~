#!/usr/bin/ruby

# cA = -122 for wfs camera
# cA = 18 for sci camera

# spower = servo
# epower = encoder
# ppower = puntino
# bpower = sbig
# apower = apogee
# fpower = StellaCam

require 'gtk2'
require 'thread'
require 'timeout'
require 'socket'


offline = Socket.gethostname =~ /trona/

$wfscat = true
$wfscat = nil if offline

# set a global path to find scripts and stuff
$wfsroot = "/mmt/shwfs"
$wfsroot = "." if offline
$wfsroot = ENV['WFSROOT'] if ENV['WFSROOT']

require "#{$wfsroot}/msg.rb"

if File.exists? '/mmt/admin/srv/tcs_lookup.rb'
  require '/mmt/admin/srv/tcs_lookup.rb'
else
  require './tcs_lookup.rb'
end

#Set the default MMTcam focus offset for Hectos
$hecto_scicam_focusoffset = -40
$swirc_scicam_focusoffset = +1120

case ARGV[0]
when "SWIRC"
  $scicam_focusoffset = $swirc_scicam_focusoffset
else
  $scicam_focusoffset = $hecto_scicam_focusoffset
end


case ARGV[0]
when 'Maestro'
  wfscat_path = "#{$wfsroot}/cont_wfscat.rb"
else
  wfscat_path = "#{$wfsroot}/wfscat.rb"
end

require wfscat_path unless offline

# set some global stuff shared by all classes
unless offline
    $wavehost, $waveport = srv_lookup('waveserv')
    $wfshost, $wfsport = srv_lookup('wavecamr')
    $scihost, $sciport = srv_lookup('wavesci')
    $pixhost, $pixport = srv_lookup('wavepix')
    $pulzhost, $pulzport = srv_lookup('pulz7')

end

$wfscpos = -122.0
$scicpos = 18.0
$wfstins = 4.5
#$scitins = 4.5
$scitins = 10.0	# changed from 4.5 11-2-2012 tjt
#$wfsfins_hecto = 19.5
$wfsfins_hecto = 22.0
$wfsfins_megacam = 9.303
$scifins = 23.5

$wfsfins = Hash.new
#$wfsfins['Hecto'] = 19.5
$wfsfins['Hecto'] = 22.0
$wfsfins['Maestro'] = 28.0
$wfsfins['MegaCam'] = 9.303
$wfsfins['SWIRC'] = 3.2
$wfsfins['MMIRS'] = 3.2


$reffoc = Hash.new
$reffoc['Hecto'] = 3182.4
$reffoc['Maestro'] = 3182.4
$reffoc['MegaCam'] = -500.0
$reffoc['SWIRC'] = -848.0
$reffoc['MMIRS'] = 0.0
$reffoc['Maestro'] = 0.0

$refspher = Hash.new
$refspher['Hecto'] = -150.0
$refspher['Maestro'] = -150.0
$refspher['MegaCam'] = -80.0
$refspher['SWIRC'] = -1079.0
$refspher['MMIRS'] = 0.0
$refspher['Maestro'] = 0.0

### define the Power Control GUI
class Power
  include MSG

  def initialize
    #@glade = GladeXML.new("#{$wfsroot}/glade/f5wfs_power.glade") {|handler| method(handler)}
    @builder = Gtk::Builder.new
    @builder.add_from_file "#{$wfsroot}/glade/f5wfs_power.xml"
    @builder.connect_signals { |h| method(h) }

    @powermain = @builder.get_object("MainWindow")

    @switches = {
      'Servo' => 'spower',
      'Encoder' => 'epower',
      'Puntino' => 'ppower',
      'SBIG' => 'bpower',
#      'Apogee' => 'apower',
      'StellaCam' => 'fpower'
    }

    @socket = sockopen($wavehost, $waveport)
    @pulz7_socket = sockopen($pulzhost, $pulzport)

    @power_thread = Thread.new {
      loop {

	### get power status for switches run by WFS computer
	if @socket
	  @switches.each { |key, par|
	    flag = msg_get(@socket, par)
	    if flag =~ /Error/
	      @builder.get_object("#{key}").child.set_text("#{key} Power ERROR")
	    else
	      flag = flag.to_i
	      if (flag == 1)
		@builder.get_object("#{key}").child.set_text("#{key} Power is ON")
	      else
		@builder.get_object("#{key}").child.set_text("#{key} Power is OFF")
	      end
	    end
	  }
	else
	  @switches.each { |key, par|
	    @builder.get_object("#{key}").child.set_text("#{key} Power UNKNOWN")
	  }
	  @socket = sockopen($wavehost, $waveport)
	end

	### get power status for switches run by pulizzis
	### first the WFS computer power
	if @pulz7_socket
	  flag = msg_get(@pulz7_socket, 'wfs_control')
	  if (flag =~ /Error/)
	    @builder.get_object("WFSpower").child.set_text("WFS Computer Power ERROR")
	  else
	    if (flag =~ /on/)
	      @builder.get_object("WFSpower").child.set_text("WFS Computer Power is ON")
	    else
	      @builder.get_object("WFSpower").child.set_text("WFS Computer Power is OFF")
	    end
	  end
	else
	  @builder.get_object("WFSpower").child.set_text("WFS Computer Power UNKNOWN")
	  @pulz7_socket = sockopen($pulzhost, $pulzport)
	end

	### then WFS drive power
	if @pulz7_socket
	  flag = msg_get(@pulz7_socket, 'wfs_drive')
	  if (flag =~ /Error/)
	    @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power ERROR")
	  else
	    if (flag =~ /on/)
	      @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power is ON")
	    else
	      @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power is OFF")
	    end
	  end
	else
	  @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power UNKNOWN")
	  @pulz7_socket = sockopen($pulzhost, $pulzport)
	end
	sleep(2)
      }
    }

    @builder.get_object("Apogee").set_sensitive(false)
    @builder.get_object("Apogee").child.set_text("Apogee Camera Disabled")
  end

  def on_MainWindow_destroy
    @power_thread.kill
    @power_thread = nil

    if @socket
      @socket.close
      @socket = nil
    end
    if @pulz7_socket
      @pulz7_socket.close
      @pulz7_socket = nil
    end
    @powermain.destroy
  end

  def on_WFSDrivepower_clicked
    flag = msg_get(@pulz7_socket, 'wfs_drive')
    if (flag =~ /Error/)
      @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power ERROR")
    else
      if (flag =~ /on/)
	cmd = msg_cmd(@pulz7_socket, 'wfs_drive', 'off')
	if cmd
	  @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power is OFF")
	else
	  @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power ERROR")
	end
      elsif (flag =~ /off/)
	cmd = msg_cmd(@pulz7_socket, 'wfs_drive', 'on')
	if cmd
	  @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power is ON")
	else 
	  @builder.get_object("WFSDrivepower").child.set_text("WFS Drive Power ERROR")
	end
      end
    end
  end
  
  def on_WFSpower_clicked
    flag = msg_get(@pulz7_socket, 'wfs_control')
    if (flag =~ /Error/)
      @builder.get_object("WFSpower").child.set_text("WFS Computer Power ERROR")
    else
      if (flag =~ /on/)
	cmd = msg_cmd(@pulz7_socket, 'wfs_control', 'off')
	if cmd
	  @builder.get_object("WFSpower").child.set_text("WFS Computer Power is OFF")
	else
	  @builder.get_object("WFSpower").child.set_text("WFS Computer Power ERROR")
	end
      elsif (flag =~ /off/)
	cmd = msg_cmd(@pulz7_socket, 'wfs_control', 'on')
	if cmd
	  @builder.get_object("WFSpower").child.set_text("WFS Computer Power is ON")
	else
	  @builder.get_object("WFSpower").child.set_text("WFS Computer Power ERROR")
	end
      end
    end
  end

  def power_clicked(command, label)
    flag = msg_get(@socket, command).to_i
    if (flag =~ /Error/)
      @builder.get_object(label).child.set_text("#{label} Power ERROR")
    else
      if (flag == 1)
	msg_cmd(@socket, command, '0')
	@builder.get_object(label).child.set_text("#{label} Power is OFF")
      else
	msg_cmd(@socket, command, '1')
	@builder.get_object(label).child.set_text("#{label} Power is ON")
      end
    end
  end

  def on_Servo_clicked
    power_clicked('spower', 'Servo')
  end

  def on_Encoder_clicked
    power_clicked('epower', 'Encoder')
  end

  def on_Puntino_clicked
    power_clicked('ppower', 'Puntino')
  end

  def on_SBIG_clicked
    power_clicked('bpower', 'SBIG')
  end

  def on_Apogee_clicked
    power_clicked('apower', 'Apogee')
  end

  def on_Filter_clicked
  end

  def on_StellaCam_clicked
    power_clicked('fpower', 'StellaCam')
  end
end

### define the configuration GUI
class ConfigGUI
  include MSG

  def initialize(inst)
    @inst = inst

    #@glade = GladeXML.new("#{$wfsroot}/glade/f5wfs_config.glade") {|handler| method(handler)}
    @builder = Gtk::Builder.new
    @builder.add_from_file "#{$wfsroot}/glade/f5wfs_config.xml"
    @builder.connect_signals { |h| method(h) }

    @configmain = @builder.get_object("MainWindow")
    @status = @builder.get_object("StatusBar")
    @builder.get_object("DefaultConfig").child.set_text("Set to Default #{@inst} Configuration")

    # map names i use with the MSG commands
    @params = {
      'toffset' => 'toffset',
      'foffset' => 'foffset',
      'tinsoff' => 'toffxxx',
      'finsoff' => 'foffxxx',
      'wfscpos' => 'p70',
      'scicpos' => 'p71',
      'wfstins' => 'p72',
      'scitins' => 'p73',
      'wfsfins' => 'p74',
      'scifins' => 'p75'
    }

    # map names i use with the MSG commands
    @cmds = {
      'toffset' => 'toffset',
      'foffset' => 'foffset',
      'tinsoff' => 'toffxxx',
      'finsoff' => 'foffxxx',
      'wfscpos' => 'p70',
      'scicpos' => 'p71',
      'wfstins' => 'p72',
      'scitins' => 'p73',
      'wfsfins' => 'p74',
      'scifins' => 'p75'
    }
    
    # map names to their default positions
    @default = {
      'toffset' => 0.0,
      'foffset' => 0.0,
      'tinsoff' => 0.0,
      'finsoff' => 0.0,
      'wfscpos' => $wfscpos,
      'scicpos' => $scicpos,
      'wfstins' => $wfstins,
      'scitins' => $scitins,
      'wfsfins' => $wfsfins[@inst],
      'scifins' => $scifins
    }

    # set the current to the default
    @current = Hash.new

    # query to see where we're at
    on_QueryConfig_clicked
  end

  # routine to print to statusbar
  def report(text)
    @status.pop(0)
    @status.push(0, text)
  end

  def move_disable
    @builder.get_object("Home").set_sensitive(false)
    @builder.get_object("DefaultConfig").set_sensitive(false)
    @builder.get_object("SetConfig").set_sensitive(false)
    @builder.get_object("QueryConfig").set_sensitive(false)
  end

  def move_enable
    @builder.get_object("Home").set_sensitive(true)
    @builder.get_object("DefaultConfig").set_sensitive(true)
    @builder.get_object("SetConfig").set_sensitive(true)
    @builder.get_object("QueryConfig").set_sensitive(true)
  end

  def on_MainWindow_destroy
    @configmain.destroy
  end

  # do the query
  def on_QueryConfig_clicked
    report("Querying WFS Configuration...")
    t = Thread.new {
      move_disable
      begin
	timeout(30) {
	  socket = sockopen($wavehost, $waveport)
	  if socket
	    @params.each { |key, param|
	      value = msg_get(socket, param)
	      if value =~ /Error/
		report("Error Querying WFS: #{value}")
	      else
		@builder.get_object("#{key}_Spinner").set_value(value.to_f)
		@current[key] = value
	      end
	    }
	    socket.close
	    socket = nil
	    report("Ready.")
	  else
	    raise "no connection"
	  end
	}
      rescue Timeout::Error
	report("Query Timed Out.")
      rescue => why
	report("Error Querying WFS: #{why}")
      end
      move_enable
    }
  end

  # set WFS stages to values given in gui
  def on_SetConfig_clicked
    report("Setting WFS Configuration...")
    t = Thread.new {
      move_disable
      begin
	timeout(60) {
	  socket = sockopen($wavehost, $waveport)
	  if socket
	    # DP - turn on servo power automatically before sending the fmove command
	    cmd = msg_cmd(socket, "spower", 1)
	    if !cmd || cmd =~ /Error/
	      raise "spower on command failed."
	    end
	    sleep 2 
	    cmd = msg_cmd(socket, "fmove", @builder.get_object("wfsfins_Spinner").value)
	    if !cmd || cmd =~ /Error/
	      raise "fmove command failed."
	    end
	    
	    # DP - wait for the fmove to complete and then turn off the servo power
            busy = 1
	    loop {
	      busy = msg_get(socket, "busy")
	      break if busy.to_i == 0
	      sleep 2
	    }
	    cmd = msg_cmd(socket, "spower", 0)
	    if !cmd || cmd =~ /Error/
	      raise "spower off command failed."
	    end
	   
	    @cmds.each { |key, param|
	      value = @builder.get_object("#{key}_Spinner").value
	      if (value != @current[key])
		cmd = msg_set(socket, param, value)
		if !cmd || cmd =~ /Error/
		  raise "setting #{param} failed."
		end
	      end
	    }
	    socket.close
	    socket = nil
	    report("Ready.")
	  else
	    raise "no connection"
	  end
	}
      rescue Timeout::Error
	report("Timed out Configuring WFS.")
      rescue => why
	report("Error Configuring WFS: #{why}")
      end
      move_enable
    }
  end

  # set WFS stages to their MegaCam defaults
  def on_DefaultConfig_clicked
    report("Setting WFS Configuration to #{@inst} Defaults...")
    t = Thread.new {
      move_disable
      begin
	timeout(60) {
	  socket = sockopen($wavehost, $waveport)
	  if socket
	    @cmds.each { |key, param|
	      if (@default[key] != @current[key])
		if (param =~ /move/)
		  cmd = msg_cmd(socket, param, @default[key])
		  if !cmd || cmd =~ /Error/
		    raise "#{param} command failed."
		  end
		else
		  cmd = msg_set(socket, param, @default[key])
		  if !cmd || cmd =~ /Error/
		    raise "setting #{param} failed."
		  end
		end
	      end
	    }

	    # DP - turn on servo power automatically before sending the fmove command
	    cmd = msg_cmd(socket, "spower", 1)
	    if !cmd || cmd =~ /Error/
	      raise "spower on command failed."
	    end
	    sleep 2

	    cmd = msg_cmd(socket, "fmove", @default['wfsfins'])
	    if !cmd || cmd =~ /Error/
	      raise "fmove command failed."
	    end

	    # DP - wait for the fmove to complete and then turn off the servo power
            busy = 1
	    loop {
	      busy = msg_get(socket, "busy")
	      break if busy.to_i == 0
	      sleep 2
	    }
	    cmd = msg_cmd(socket, "spower", 0)
	    if !cmd || cmd =~ /Error/
	      raise "spower off command failed."
	    end

	    socket.close
	    socket = nil
	    report("Ready.")
	  else 
	    raise "no connection"
	  end
	}
      rescue Timeout::Error
	report("Timed out Configuring WFS.")
      rescue => why
	report("Error Configuring WFS: #{why}")
      end
      move_enable
      # run this to update the gui
      on_QueryConfig_clicked
    }
  end

  # home the WFS system
  def on_Home_clicked
    report("Homing WFS....")
    t = Thread.new {
      move_disable
      begin
	timeout(300) {
	  socket = sockopen($wavehost, $waveport)
	  if socket
	    cmd = msg_cmd(socket, "spower", 1)
	    if !cmd || cmd =~ /Error/
	      raise "spower on command failed."
	    end
	    # sleep added 10202009 by GW & DP
	    sleep 2 
	    cmd = msg_cmd(socket, "home", nil)
	    busy = 1
	    loop {
	      busy = msg_get(socket, "busy")
	      break if busy.to_i == 0
	      sleep 2
	    }
	    cmd = msg_cmd(socket, "spower", 0)
	    if !cmd || cmd =~ /Error/
	      raise "spower off command failed."
	    end
	    socket.close
	    socket = nil
	    report("WFS Homed.")
	  else
	    raise "no connection"
	  end
	}
      rescue Timeout::Error
	report("Timed Out Homing WFS.")
      rescue => why
	report("Error Homing WFS: #{why}")
      end
      move_enable
    }
  end

end

### define the main GUI window
class MainWindow
  include MSG

  def initialize(inst)
    @inst = inst
    @builder = Gtk::Builder::new
    @builder.add_from_file('/mmt/shwfs/glade/f5wfs_gui_glade3_v2.glade')
    @builder.connect_signals{|handler| method(handler)}


#    @builder.get_object("hbox4").hide
#    @builder.get_object("SciTemp").hide

    @mainwindow = @builder.get_object("MainWindow")
    @mainwindow.set_title("F/5 WFS Interface for #{@inst}")

    @status = @builder.get_object("StatusBar")
    @menubar = @builder.get_object("menubar1")

    @catalog = WFSCat.new(self) if $wfscat

    # motion buttons and stuff
    @stow = @builder.get_object("StowWFS")
    @onaxis = @builder.get_object("OnAxis")
    @deployscicam = @builder.get_object("DeploySciCam")
    @focusoffset_label = @builder.get_object("offset_label")
    @deployscicam.child.set_text("Deploy SciCam & Apply Offset")
    @focusoffset_label.set_markup("<span foreground='blue'> MMTCam Offset: OFF </span>")
    @scicam_focus_off_applied = false

    # camera selection
    @wfscam = @builder.get_object("WFSradio")
    @scicam = @builder.get_object("SCIradio")

 #   @wfscam.hide
 #   @scicam.hide

    # wfs source selection
    @wfssky = @builder.get_object("WFSsky")
    @wfsref = @builder.get_object("WFSref")

    # camera configuration

    # exposure configuration
    @expose = @builder.get_object("Expose")
    @nexp = @builder.get_object("NExp")
    @exptime = @builder.get_object("ExpTime")
    @direntry = @builder.get_object("DirEntry")
    @direntry.set_text("#{$wfsroot}/datadir")
    @fileentry = @builder.get_object("FileEntry")

    # cooler controls
    @scitemp = @builder.get_object("SciTemp")
    @scicooler = @builder.get_object("SciCooler")
    @scicooler.set_sensitive(false)
    @scicooler.hide
    @wfstemp = @builder.get_object("WFSTemp")
    @wfscooler = @builder.get_object("WFSCooler")

    # wfs and cam state vars
    @cam = "wfs"
    @wfs = "sky"

    @scicam_deployed = false
    @cam_bin = 1
    @cam_nx = 1024
    @cam_ny = 1024
    @cam_x1 = 1
    @cam_y1 = 1
    @filter = "U"

    @on_axis = false

    # find current state and config accordingly
    wfssock = sockopen($wavehost, $wfsport)
    if (wfssock)
      w_setp = msg_get(wfssock, "setp")
      wfssock.close
      wfssock = nil
      set_wfscool_text(w_setp)
    else
      report("Failed to Connect to WFS Camera.")
    end

#    scisock = sockopen($wavehost, $sciport)
#    if (scisock)
#      s_setp = msg_get(scisock, "setp")
#      scisock.close
#      scisock = nil
#      set_scicool_text(s_setp)
#    else
#      report("Failed to Connect to Science Camera.")
#    end

    temp_mon

  end

  def temp_mon
    # fire a thread to monitor temps
    @temp_mon = Thread.new {
      loop do
	wfssock = sockopen($wavehost, $wfsport)
#	scisock = sockopen($wavehost, $sciport)
	wfstemp = msg_get(wfssock, "temp")
#	scitemp = msg_get(scisock, "temp")
	if wfssock
	  wfssock.close
	  wfssock = nil
	end
#	scisock.close
#	scisock = nil
	set_wfstemp_text(wfstemp)
#	set_scitemp_text(scitemp)
	sleep(2)
      end
    }
  end    

  def on_axis?
    return @on_axis
  end

  def set_wfstemp_text(temp)
    if temp && temp !~ /Error/
      @wfstemp.set_markup("WFS Camera\n     Temp:\n    #{temp}<sup>o</sup> C")
    end
  end

  def set_scitemp_text(temp)
    if temp && temp !~ /Error/
      @scitemp.set_markup("Science Camera\n       Temp:\n      #{temp}<sup>o</sup> C")
    end
  end

  def set_wfscool_text(setp)
    if setp
      if (setp.to_f < 0)
	@wfscooler.child.set_text("WFS Camera\nCooling is ON")
      else
	@wfscooler.child.set_text(" WFS Camera\nCooling is OFF")
      end
    end
  end

  def set_scicool_text(setp)
    if setp
      if (setp.to_f < 0)
	@scicooler.child.set_text("Science Camera\n Cooling is ON")
      else
	@scicooler.child.set_text("Science Camera\n Cooling is OFF")
      end
    end
  end

  def on_SciCooler_clicked
    socket = sockopen($wavehost, $sciport)
    setp = msg_get(socket, "setp")
    if setp && setp !~ /Error/
      setp = setp.to_f
      if (setp < 0)
	msg_cmd(socket, "cooler", "0")
	set_scicool_text(10.0)
      else
	msg_cmd(socket, "cooler", "1")
	set_scicool_text(-50.0)
      end
    end
    socket.close if socket
    socket = nil
    @temp_mon.kill
    temp_mon
  end

  def on_WFSCooler_clicked
    socket = sockopen($wavehost, $wfsport)
    setp = msg_get(socket, "setp")
    if setp && setp !~ /Error/
      setp = setp.to_f
      print setp.to_f
      if (setp < 0)
	msg_cmd(socket, "cooler", "0")
	set_wfscool_text(10.0)
        print "0\n"
      else
	msg_cmd(socket, "cooler", "1")
	set_wfscool_text(-50.0)
        print "1\n"
      end
    end
    socket.close
    socket = nil
    @temp_mon.kill
    temp_mon
  end

  # bring up config window
  def on_configure_wfs1_activate
    ConfigGUI.new(@inst)
  end

  # bring up StellaCam window
  def on_run_stella_activate
    system("#{$wfsroot}/stellagui.rb &")
  end

  # bring up power window
  def on_power_activate
    
    Power.new
  end

  # bring up catalog window
  def on_wfs_catalog1_activate
    unless @catalog
      @catalog = WFSCat.new(self)
    end
  end

  # clean up catalog pointer
  def killcat
    @catalog = nil
  end

  # kill the main window on a destroy
  def on_MainWindow_destroy
    Gtk.main_quit
  end

  # routine to print to statusbar
  def report(text)
    @status.pop(0)
    @status.push(0, text)
  end

  # routine to disable move buttons
  def move_disable
    @stow.set_sensitive(false)
    @onaxis.set_sensitive(false)
    @deployscicam.set_sensitive(false)
  end

  # routine to disable move buttons
  def move_enable
    @stow.set_sensitive(true)
    @onaxis.set_sensitive(true)
 
    @deployscicam.set_sensitive(true)
  end

  def wait4wfs(socket)
    busy = 1
    loop {
      busy = msg_get(socket, "busy")
      break if busy.to_i == 0
      sleep(2)
    }
  end

  # menubar callbacks
  def on_quit_activate
    Gtk.main_quit
  end

  def on_wfs_computer1_activate
    system("vncviewer wavefront:0 &")
  end

  def on_wavedisplay1_activate
    system("#{$wfsroot}/wavedisplay &")
  end

  def on_about1_activate
    report("First cut at a remote f/5 WFS interface")
  end

  # movement callbacks
  def on_StowWFS_clicked
    
    #There is a slight bug(Feature?) with MMTCam that if you stow directly 
    #from mmtcam, the WFS stage isn't quite stowed (basically the "stow" command
    # when select sci is up gives a slightly different position than when "wfs" 
    # is up).  To fix this, check to see if MMTCam is deployed.  If yes, then 
    # first put on-axis with wfs then stow
    if @scicam_deployed == true
      report("MMTCam converting to WFS before stow")
      socket = sockopen($wavehost, $waveport)
      if socket
        cmd = msg_cmd(socket, "spower", 1)
        if !cmd || cmd =~ /Error/
          raise "Servo power failed"
        end
        sleep(2)
        cmd = msg_cmd(socket, "select", "wfs")
        if !cmd || cmd =~ /Error/
          raise "WFS deploy failed"
        end
        
        wait4wfs(socket)
        socket.close
        socket = nil
        @scicam_deployed == false
        remove_Scicam_offset
      end
    end

    report("Moving WFS Stage off-axis to stow position...")
    t = Thread.new {
      move_disable
      begin
	timeout(90) {
	  socket = sockopen($wavehost, $waveport)
	  if socket
	    cmd = msg_cmd(socket, "spower", 1)
	    if !cmd || cmd =~ /Error/
	      raise "spower on command failed."
	    end
	    # DP - set sleep to 2 from 1
	    sleep(2)

	    cmd = msg_cmd(socket, "stow", nil)
	    if !cmd || cmd =~ /Error/
	      raise "stow command failed."
	    end
	    wait4wfs(socket)

	    # turn stella and servo power off
	    cmd = msg_cmd(socket, "fpower", 0)
	    if !cmd || cmd =~ /Error/
	      raise "fpower off command failed."
	    end
	    cmd = msg_cmd(socket, "spower", 0)
	    if !cmd || cmd =~ /Error/
	      raise "spower off command failed."
	    end
	    socket.close
	    socket = nil
	    report("WFS stowed.")
	    @on_axis = false
	  else
	    raise "no connection"
	  end
	}
      rescue Timeout::Error
	report("WFS Stow Timed Out.")
      rescue => why
	report("Error Stowing WFS: #{why}")
      end
      move_enable
    }

    remove_Scicam_offset
end

  def deploy_wfs(pos)
    t = Thread.new {
      move_disable
      begin
	timeout(180) {
	  socket = sockopen($wavehost, $waveport)
	  if socket

	    # turn stella and servo power on
	    cmd = msg_cmd(socket, "fpower", 1)
	    if !cmd || cmd =~ /Error/
	      raise "fpower on command failed."
	    end
	    cmd = msg_cmd(socket, "spower", 1)
	    if !cmd || cmd =~ /Error/
	      raise "spower on command failed."
	    end
	    # DP - changed sleep to 2 from 1
	    sleep(2)

	    # make sure we select WFS camera by default
	    cmd = msg_cmd(socket, "select", "wfs")
	    wait4wfs(socket)
	    report("WFS Camera selected.")

	    cmd = msg_cmd(socket, "tposi", pos)
	    wait4wfs(socket)
	    if pos == 0
	      report("WFS on-axis.")
	    else
	      report("WFS deployed.")
	    end
	    @on_axis = true

	    cmd = msg_cmd(socket, "pmove", "620")
	    cmd = msg_cmd(socket, "plite", "0")
	    loop {
	      ppos = msg_get(socket, 'pA').to_i
	      break if ppos > 600
	      sleep 1
	    }
	    report("WFS stage set to sky.")

	    # turn servo power off
	    cmd = msg_cmd(socket, "spower", 0)
	    if !cmd || cmd =~ /Error/
	      raise "spower off command failed."
	    end

	    socket.close
	    socket = nil
	  else
	    raise "no connection"
	  end
	}
      rescue Timeout::Error
	report("WFS Move Timed Out.")
      rescue => why
	report("Error moving WFS: #{why}")
      end
      move_enable
    }
  end    

  def on_OnAxis_clicked
    report("Moving WFS Stage on-axis....")
    deploy_wfs(0)
    
    remove_Scicam_offset
    report("WFS Stowed and Focus Offset Removed")
    

end

  def apply_Scicam_offset

        #Check to see if, somehow, the focus is already applied, if not apply it
        if @scicam_focus_off_applied == false
          system("echo \"offset_cc operator z #{$scicam_focusoffset}\" | nc -w 5 hexapod 5340 > /dev/null")
          system("echo \"apply_offsets\" | nc -w 5 hexapod 5340 > /dev/null")
          
          #Keep accounting of the focus offset
          @scicam_focus_off_applied = true
          @focusoffset_label.set_markup("<span foreground='red'> MMTCam Offset: ON </span>")
        end

  end

  def remove_Scicam_offset
    #Since this is only run when the scicam is out, make sure we propogate taht the 
    #mmtcam isn't deployed
    @scicam_deployed = false
    #Be sure that the focus offset is removed (unless it was somehow)
    
       if @scicam_focus_off_applied == true
         $negative_offset = $scicam_focusoffset * (-1)
         system("echo \"offset_cc operator z #{$negative_offset}\" | nc -w 5 hexapod 5340 > /dev/null")
         system("echo \"apply_offsets\" | nc -w 5 hexapod 5340 > /dev/null")
         
         @scicam_focus_off_applied = false
         @focusoffset_label.set_markup("<span foreground='blue'> MMTCam Offset: OFF </span>")
         @deployscicam.child.set_text("Deploy SciCam & Apply Offset")
       
       end

end


  def on_DeploySciCam_clicked

      if @scicam_deployed == false 
        report("Deploying Science Camera \"...")

        
        t = Thread.new {
          move_disable
          begin
            timeout(90) {
              socket = sockopen($wavehost, $waveport)
              if socket 
                cmd = msg_cmd(socket, "spower", 1)
                if !cmd || cmd =~ /Error/
                  raise "spower on command failed."
                end
                sleep(2)
                
                #Command scicam to move
                cmd = msg_cmd(socket, "select", "sci")
                if !cmd || cmd =~ /Error/
                  raise "MMTcam deploy command failed."
                end
                @scicam_deployed = true
                wait4wfs(socket)
                
                #turn stella and servo power off
                cmd = msg_cmd(socket, "fpower", 0)
                if !cmd || cmd =~ /Error/
                  raise "Stellar cam poweroff command failed."
                end

                cmd = msg_cmd(socket, "spower", 0)
                if !cmd || cmd =~ /Error/
                  raise "Servo poweroff command failed."
                end

                #This is the block in case we need to turn on Apogee power. 
                #At this point, we don't think this is needed, so I am going to leave the code 
                #commented out for now in the event we do need it later.
                #cmd = msg_cmd(socket, "apower", 0)
                #if !cmd || cmd =~ /Error/
                #  raise "Apogee poweron command failed."
                #end
                
                #Close the socket
                socket.close
                socket = nil
             else
                raise "no connection to WFS Computer"
             end
          }
          rescue Timeout::Error
            report("Timed out Deploying MMTCam")
          rescue => why
            report("Error Deploying MMTCam: #{why}")
          end
          move_enable
        report("MMTCam Deployed and Focus Offset Applied")
        @deployscicam.child.set_text("Stow WFS & Remove Offset")
        @scicam_deployed = true
      }

      
        apply_Scicam_offset
        
      else
        report("Stowing WFS \" ...")
        on_StowWFS_clicked

      end
end
      



  # camera and wfs selections
  def on_WFSradio_toggled
    socket = sockopen($wavehost, $waveport)
    if @wfscam.active?
      @cam = "wfs"
      report("Selecting WFS Camera...")
      t = Thread.new {
	begin
	  timeout(10) {
	    cmd = msg_cmd(socket, "select", "wfs")
	    wait4wfs(socket)
	    report("WFS Camera selected.")
	  }
	rescue Timeout::Error
	  report("WFS Camera Selection Timed Out.")
	rescue => why
	  report("Error selecting WFS Camera: #{why}")
	end
	socket.close
	socket = nil	
      }
    else
      @cam = "sci"
      report("Selecting Science Camera...")
      t = Thread.new {
	begin
	  timeout(10) {
	    cmd = msg_cmd(socket, "select", "sci")
	    wait4wfs(socket)
	    report("Science Camera selected.")
	  }
	rescue Timeout::Error
	  report("Science Camera Selection Timed Out.")
	rescue => why
	  report("Error selecting Science Camera: #{why}")
	end
	socket.close
	socket = nil
      }
    end
    @nx.set_value(@cam_nx.to_i)
    @ny.set_value(@cam_ny.to_i)
    @x1.set_value(@cam_x1.to_i)
    @y1.set_value(@cam_y1.to_i)
    @binning.set_value(@cam_bin.to_i)
  end

  def on_WFSsky_toggled
    socket = sockopen($wavehost, $waveport)
    if @wfssky.active?
      @wfs = "sky"
      report("Setting WFS to view sky...")
      t = Thread.new {
	begin
	  timeout(10) {
	    cmd = msg_cmd(socket, "pmove", "620")
	    cmd = msg_cmd(socket, "plite", "0")
	    loop {
	      ppos = msg_get(socket, 'pA').to_i
	      break if ppos > 600
	      sleep 1
	    }
	    report("WFS set to view sky.")
	    @fileentry.text = "manual_wfs"
	    @exptime.value = 5.0
	  }
	rescue Timeout::Error
	  report("Timed out setting WFS to sky.")
	rescue => why
	  report("Error setting WFS to sky: #{why}")
	end
	socket.close
	socket = nil
      }
    else 
      @wfs = "ref"
      report("Setting WFS to view reference source...")
      t = Thread.new {
	begin
	  timeout(10) {
	    cmd = msg_cmd(socket, "pmove", "1")
	    cmd = msg_cmd(socket, "plite", "1")
	    loop {
	      ppos = msg_get(socket, 'pA').to_i
	      break if ppos < 5
	      sleep(1)
	    }
	    report("WFS set to reference source.")
	    @fileentry.text = "Ref"
	    @exptime.value = 2.0
	  }
	rescue Timeout::Error
	  report("Timed out setting WFS to reference.")
	rescue => why
	  report("Error setting WFS to reference: #{why}")
	end
	socket.close
	socket = nil
      }
    end
  end

  # filter handlers
  def on_u_activate
    @filter = "U"
  end

  def on_b_activate
    @filter = "B"
  end

  def on_v_activate
    @filter = "V"
  end

  def on_r_activate
    @filter = "R"
  end

  def on_i_activate
    @filter = "I"
  end


  # configure and take exposure
  def on_Expose_clicked
    nexp = @nexp.value_as_int
    exptime = @exptime.value.to_f
    dir = @direntry.text
    file = @fileentry.text


    t = Thread.new {
      @expose.set_sensitive(false)
      print "here\n"
      error = false
      n = 1
      
      nexp.times {

        
	# figure out the filename
	if file == "test_DELETE"
	  fullfilename = "#{dir}/#{file}.fits"
	  filename = "#{file}.fits"
	  system("rm -f #{fullfilename}")
	else
	  num = 0
	  fullfilename = sprintf("%s/%s_%04d.fits", dir, file, num)
	  filename = sprintf("%s_%04d.fits", file, num)
	  while test(?s, fullfilename) 
	    num = num + 1
	    fullfilename = sprintf("%s/%s_%04d.fits", dir, file, num)
	    filename = sprintf("%s_%04d.fits", file, num)
	  end
	end

        print "Attempting to start exposure\n"

	# fire a thread to countdown the exposures on the statusbar
	if exptime >= 1
	  count = Thread.new {
	    left = exptime.to_i
	    left.times {
	      report("Exposing \##{n} (#{filename})...#{left} sec left.")
	      sleep(1)
	      left = left - 1
	    }
	    report("Reading out \##{n} (#{filename})....")
	  }
	else
	  report("Exposing \##{n} (#{filename})....")
	end

	# give the script 10 sec beyond the exposure time, else it's stuck
	begin
	  time = exptime+30
	  get_stuff = Thread.new {
	    system("#{$wfsroot}/getimage #{exptime} #{fullfilename}")
	  }

	  timeout = 0
	  while get_stuff.alive?
	    if (timeout >= time && get_stuff.alive?)
	      get_stuff.kill
	      raise "F5wfs communication script hung."
	    end
	    sleep(1.0)
	    timeout = timeout+1
	  end
	
	rescue Timeout::Error
	  report("Timed out exposing #{filename}.")
	  error = true
	  break
	rescue => why
	  report("Error exposing #{filename}: #{why}")
	  error = true
	  break
	end

	# counter thread had better be dead by now, else something is amiss
	if (count.alive?)
	  count.kill
	  report("Error exposing #{filename}: Script died prematurely.")
	  error = true
	  break
	end

	# should only get here if all is well
	begin
	  timeout(10) {
	    #puts "full file name is: #{fullfilename}"
	    if test(?s, fullfilename)
	      system("#{$wfsroot}/header.pl #{fullfilename} #{exptime} F5")
	      system("/usr/bin/xpaset -p WFS file #{fullfilename}")
	      system("/usr/bin/xpaset -p WFS zoom to 1.0")
	    else
	      raise "Image Missing"
	    end
	  }
	rescue Timeout::Error
	  report("Timed out (telserver?) image header or displaying image.")
	  # report("Timed out generating image header or displaying image.")
	  error = true
	  break
	rescue => why
	  report("Error generating image header or displaying image.")
	  error = true
	  break
	end
	n = n + 1
      }

      # if all's well, report completion, else leave the last error intact
      if (!error)
	if (nexp == 1)
	  report("Completed Exposure.")
	else 
	  report("Completed Exposures.")
	end
      end

      @expose.set_sensitive(true)
    }
  end
end

# get the ball rolling!
Gtk.init
MainWindow.new(ARGV[0])
Gtk.main
